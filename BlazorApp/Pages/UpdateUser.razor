@page "/update-user"

@using Domain_Layer.Models.User
@using Shared_Layer.DTO_s.User
@using Shared_Layer.ApiServices
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject IUserServices UserService
@inject HttpClient Http
@inject ILocalStorageService localStorage

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header text-center bg-light text-dark">
                    <h2>Update User</h2>
                </div>
                <div class="card-body">
                    <EditForm Model="@updatingUserModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="form-floating mb-3">
                            <InputText id="email" class="form-control" @bind-Value="updatingUserModel.Email" placeholder="Email" />
                            <label for="email">Email</label>
                        </div>

                        <div class="form-floating mb-3">
                            <InputText id="currentPassword" class="form-control" type="password" @bind-Value="updatingUserModel.CurrentPassword" placeholder="Current Password" />
                            <label for="currentPassword">Current Password</label>
                        </div>

                        <div class="form-floating mb-3">
                            <InputText id="newPassword" class="form-control" type="password" @bind-Value="updatingUserModel.NewPassword" placeholder="New Password" />
                            <label for="newPassword">New Password</label>
                        </div>

                        <div class="form-floating mb-3">
                            <InputSelect id="role" @bind-Value="updatingUserModel.Role" class="form-control">
                                <option value="">Select a role</option>
                                <option value="Teacher">Teacher</option>
                                <option value="Student">Student</option>
                                <option value="Admin">Admin</option>
                            </InputSelect>
                            <label for="role">Role</label>
                        </div>

                        <div class="form-floating mb-3">
                            <InputText id="firstName" class="form-control" @bind-Value="updatingUserModel.FirstName" placeholder="First Name" />
                            <label for="firstName">First Name</label>
                        </div>

                        <div class="form-floating mb-3">
                            <InputText id="lastName" class="form-control" @bind-Value="updatingUserModel.LastName" placeholder="Last Name" />
                            <label for="lastName">Last Name</label>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-block">Update Profile</button>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3" role="alert">
                                @errorMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success mt-3" role="alert">
                                @successMessage
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

      
@code {

    private UpdatingUserDTO updatingUserModel = new UpdatingUserDTO();
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var selectedUser = await localStorage.GetItemAsync<UserModel>("selectedUser");
        if (selectedUser != null)
        {
            updatingUserModel.FirstName = selectedUser.FirstName;
            updatingUserModel.LastName = selectedUser.LastName;
            updatingUserModel.Email = selectedUser.Email;
            updatingUserModel.Role = selectedUser.Role;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await UserService.UpdateUserAsync(updatingUserModel);
            successMessage = "Profile updated successfully!";            
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
