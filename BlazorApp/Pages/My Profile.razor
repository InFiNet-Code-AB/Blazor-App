@page "/my-profile"
@using Blazored.LocalStorage
@using Domain_Layer.Models.User
@using System.Net.Http.Headers
@using System.Security.Claims
@using Shared_Layer.DTO_s.User
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            @if (user != null)
            {
                <div class="card shadow-lg rounded-3" style="background-image: linear-gradient(to right,#b4cde0, #7a8e9f, #4b538e);">
                    
                    <div class="card-body p-4">
                         <h3 class="text-center font-monospace mb-5">My Profile</h3>
                        <div class="mb-4">
                            <p><strong>First Name:</strong> @user.FirstName</p>
                        </div>
                        <div class="mb-4" >
                            <p><strong>Last Name:</strong> @user.LastName</p>
                        </div>
                        <div class="mb-4">
                            <p><strong>Email:</strong> @user.Email</p>
                        </div>
                        <div class="mb-5">
                            <p><strong>Role:</strong> @user.Role</p>
                        </div>
                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-primary" @onclick="UpdateProfile">
                                <i class="bi bi-pencil-square"></i> Update
                            </button>
                            <button class="btn btn-danger" @onclick="DeleteProfile">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="text-danger">@errorMessage</p>
            }
            else
            {
                <div class="text-center">
                    <p class="spinner-border text-primary" role="status"></p>
                    <p>Loading...</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private UserModel user;
    private UpdatingUserDTO updatingUserModel = new UpdatingUserDTO();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var email = GetEmailFromToken(token);
                user = await Http.GetFromJsonAsync<UserModel>($"api/User/by-email/{email}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load profile: {ex.Message}";
        }
    }

    private string GetEmailFromToken(string token)
    {
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var emailClaim = jwtToken.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.Email);
        return emailClaim?.Value;
    }

    private async void UpdateProfile()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var email = GetEmailFromToken(token);
                var loggedInUser = await Http.GetFromJsonAsync<UserModel>($"api/User/by-email/{email}");

                if (loggedInUser != null)
                {
                    await LocalStorage.SetItemAsync("selectedUser", loggedInUser); // Save the logged-in user’s details
                    Navigation.NavigateTo("/update-user"); 
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update profile: {ex.Message}";
        }
    }


    private async Task DeleteProfile()
    {
        
    }
}
