@page "/login"
@using Blazored.LocalStorage
@using Domain_Layer.CommandOperationResult
@using Domain_Layer.Models.User
@using Microsoft.AspNetCore.Components.Authorization
@using Shared_Layer.DTO_s.User
@using Shared_Layer.ApiServices;
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject IUserServices ApiService;
@inject NavigationManager Navigation;
@inject IAuthenticationService AuthenticationService

<div class="login-page d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow login-card">
        <h2 class="text-center mb-4 text-primary">Welcome </h2>
        <p class="text-center text-muted">Log in to access your account</p>
        <EditForm Model="loginUser" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-floating mb-3">
                <InputText id="email" class="form-control" @bind-Value="loginUser.Email" placeholder="Email" />
                <label for="email">Email</label>
                <ValidationMessage For="@(() => loginUser.Email)" />
            </div>

            <div class="form-floating mb-3">
                <InputText id="password" type="password" class="form-control" @bind-Value="loginUser.Password" placeholder="Password" />
                <label for="password">Password</label>
                <ValidationMessage For="@(() => loginUser.Password)" />
            </div>

            <button type="submit" class="btn btn-primary w-100 btn-lg">Login</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3 text-center">@errorMessage</div>
        }

        <div class="text-center mt-3">
            <a href="/forgot-password" class="text-decoration-none text-muted">Forgot Password?</a>
        </div>
        <div class="text-center mt-2">
            <a href="/register" class="text-decoration-none text-primary">Create an Account</a>
        </div>
    </div>
</div>

@code {
    private LoginUserDTO loginUser = new LoginUserDTO();
    private string errorMessage;

    async Task HandleLogin()
    {
        errorMessage = string.Empty;
        try
        {
            bool loginSuccessful = await AuthenticationService.LoginAsync(loginUser);

            if (loginSuccessful)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Felaktig e-postadress eller lösenord. Försök igen.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Inloggning misslyckades: {ex.Message}";
        }
    }
}
