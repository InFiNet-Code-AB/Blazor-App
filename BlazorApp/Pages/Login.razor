@page "/login"
@using Blazored.LocalStorage
@using Domain_Layer.CommandOperationResult
@using Domain_Layer.Models.User
@using Microsoft.AspNetCore.Components.Authorization
@using Shared_Layer.DTO_s.User
@using Shared_Layer.ApiServices;
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject IUserServices ApiService;
@inject NavigationManager Navigation;
@inject IAuthenticationService AuthenticationService

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow">
        <h2 class="text-center">Login</h2>
        <EditForm Model="loginUser" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginUser.Email" />
                <ValidationMessage For="@(() => loginUser.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginUser.Password" />
                <ValidationMessage For="@(() => loginUser.Password)" />
            </div>
            <button type="submit" class="btn btn-primary w-100 mb-3">Login</button>
        </EditForm>
       
    </div>
</div>

@code {
    private LoginUserDTO loginUser = new LoginUserDTO();

    async Task HandleLogin()
    {
        try
        {
            await AuthenticationService.LoginAsync(loginUser);

            var token = await LocalStorage.GetItemAsync<string>("authToken");

            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login failed: {ex.Message}");
        }
    }
}
