@inherits LayoutComponentBase
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage

<div class="page">
    <Sidebar></Sidebar>

    <main>
        <div class="top-row px-4">
            @if (isAuthenticated)
            {
                <a href="/logout" class="btn btn-danger" style=" font-family: 'Arial', sans-serif; font-size: 14px;"><i class="bi bi-box-arrow-right"></i>  Logout</a>
            }
            else
            {
                <a href="/login" class="btn btn-success " style=" font-family: 'Arial', sans-serif; font-size: 14px;"><i class="bi bi-box-arrow-in-right"></i> Login</a>
                <a href="/register" class="btn btn-info" style=" font-family: 'Arial', sans-serif; font-size: 14px;"><i class="bi bi-person-plus"></i> Sign Up</a>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        // Listen for changes
        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () =>
        {
            var authState = await task;
            isAuthenticated = authState.User.Identity.IsAuthenticated;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}